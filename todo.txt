
# Antlr Editing Plugins To-Dos

 - Track insertions and update custom highlighting offsets in adhoc highlighting sequence?
   - Could use general support for sets of ranges in the range library

 - Preview re-highlighting does not happen until a modification, after a text change in the preview

 - Preview panel is not tracking the caret and updating the breadcrumb or tree anymore
   - Seems like the caret listener is not working except on focus gained
     - Try selection listener instead?
     - Or is the fancy scrolling stuff broken?

 - Split out import finder from the resolving stuff?

 - Preview colorings should include items from tokens files, imported grammars.

 - Enhance relative resolvers in the nb specialization project to look up tokens files, etc. from the project's ClassPathProvider

 - Clean up / decomplicate RelativeResolver - should just be a conversion API

 - @ImportNames annotation to auto generate name resolution / goto declaration support

 - Resolve via tokens file into other project on classpath via ClassPathProvider

 - Maybe get the parsed grammar object out of the grammar result - no need to keep it hanging around, 
   and it's not really used except for update check - could just keep the JFSFileModifications snapshot
   and that is enough; those things that actually need the output should get them via the as yet
   unused antlr output api.

 - Make coalescing use evil continue-as-goto instead of recursion?

 - UI for ATN prediction at cursor - started in parser-recorder

 - Sort out the range generics puzzle with coalescing

 - Get .tokens file contents / related grammar tokens into extraction / preview

 - The pattern matching stuff in antlr-formatters is exactly what is needed for code completion - extract and generify it

!!! Font color entries not written to layer unless the annotation processor
is called multiple times (e.g. there is another highlighting entry on a
highlighter registration annotation on a key).

fix coalescer to support longs

-------

# General Antlr Plugin Support To-Dos

Declarative registraton of resolvers, actual attribution phase

Use new carets api to do inplace rename refactoring

Maybe generic scoping - parser rule based what can reference what?


CODE COMPLETION:
 - Annotation + processor for registering it - OR ADD TO AntlrLanguageRegistration so it can access parser / lexer
    - Filter tokens optionally
    - Insertion policy (prepend/append space under what conditions)
 - Ability to flag a named region extraction key as providing completions after a list of tokens
    - Ability to intercept and filter based on scope
 - Generic extraction-based completion contributor

FORMATTING:

 - Rename AntlrFormatterProvider to AntlrFormatter and update in the annotation processor
 - REINDENT SUPPORT
 - Wrapping lines action is not getting the correct line position and going insane
 - Should preserve whitespace if no action taken

ACTIONS:

 - Most likely just need to use shared action names now that they're in the editor kit
   - Well, that's a big fat NOPE.

OTHER:
 - Generic indexing support
   - Annotation?


