mode declarations get mangled by default reformatting.

Various BadLocationExceptions thrown after copy/paste in documents when preview active.  Should really just destroy the model with prejudice and rebuild at that point.

Should add a build listener which can make antlr error lines clickable in output window.


Need tests for hetero object graph

Would a better option be to implement TokenSource over nb document TokenHierarchy?

Perhaps enum of Rules - would be more useful for code completion
 
Code sample should be able to be a file.

Keybindings for instant rename and goto declaration are broken
 - Problem is in the keybinding registration - Editors/text/x-g4/Keybindings has the file - ??

Add hint to turn terminal nodes in parser rules into lexer rules or fragments

We are capturing 'skip' directives - should capture channels and offer to change a skip to an unused channel number > 0

Hint to unwrap blocks which are solo w/o any EBNF, e.g. foo: (bar baz); or a : b (c)?)

Factor out a simple error highlighter from AntlrRuntimeErrorsHighlighter

Finish ebnf suggestions parser - generated text is broken

Error 184 for overlapped rules - should offer to consolidate.



# Refactoring

Need a way to contribute different char filters based on region key

Add option to hints to be added to changes, which will result in selection

Combined undo for refactoring	 

Move annotations littered into SPI into their own package.

All annotation processors should use TypeName, not literal strings.

KeyedSemanticRegion and friends with comparable and two type parameters?  Would be more flexible than NamedSemanticRegions for capturing information.  Still needs enum key field?
  - Attributions could probably be that and it would be more intuitive
  - Will be needed for complex namespace matching, e.g. com.foo.bar.SomeName equals SomeName in another file - probably scoping is not enough.


AntlrKeys should probably be in its own module.  So should the key types in antlr-common - not needed for general Antlr modules, only for
antlr language support.

JFS and friends should be under antlr-editing-plugins - not used in the general case.

NB filesystem for jfs for debugging?


Font color specifying in html renderer seems to be broken.  Need a fork?
  - Have the fork, need to fix the same bug in it.

Fix UsageFinder API


# Antlr Editing Plugins To-Dos

  * Import finders and project helper sibling search being called WAY too many times per-parse - threadlocal context and cache?
     * Maybe a generalized threadlocal context and cache API?
  * Folders needs entries for SOURCE_RESOURCES and TEST_SOURCE_RESOURCES, and helpers should support them
  * Add warning when skip action encountered
  * Need a JavaSourceForAntlrSourceQuery to implement refactoring of rule names where we actually go ahead and refactor Java code
  * Add array of preferred rules to generic code completion?
  * Split out code to create parser and api for antlr parser results from annotations and
   other stuff in language spi  * does not belong together
  * Ability to specify a centrality key for Navigator panel annotations  
   * will have to be a Supplier<NamedReferenceSetKey<?>>, so it's not necessary to write implementation
    to enable graph-algorithm facilitated sorting
  * For SemanticRegion highlighting, nesting depth based alteration of color w/ some algorithms, e.g. alpha or hue + by
    * Nestable colorations, as in our old ebnf support
  * Sample should be specifiable as a URL / file name
  * Java embedding for Antlr, general Antlr embedding support
  * Track insertions and update custom highlighting offsets in adhoc highlighting sequence?
    * Could use general support for sets of ranges in the range library
  * Relative should *prefer* but not insist on looking up the same type
  * Keybinding actions still not actually working if not performers for standard netbeans ones
  * Resolve via tokens file into other project on classpath via ClassPathProvider
    * Enhance relative resolvers in the nb specialization project to look 
     up tokens files, etc. from the project's ClassPathProvider
  * Maybe get the parsed grammar object out of the grammar result
      * no need to keep it hanging around, and it's not really used except for update check  * could just keep the JFSFileModifications snapshot
        and that is enough; those things that actually need the output should get them via the as yet
        unused antlr output api.
  * The pattern matching stuff in antlr-formatters is exactly what is needed for code completion  * extract and generify it

!!! Font color entries not written to layer unless the annotation processor
is called multiple times (e.g. there is another highlighting entry on a
highlighter registration annotation on a key).

-------

# General Antlr Plugin Support To-Dos

Use new carets api to do inplace rename refactoring

Maybe generic scoping  * parser rule based what can reference what?


CODE COMPLETION:
  * Annotation + processor for registering it  * OR ADD TO AntlrLanguageRegistration so it can access parser / lexer
     * Filter tokens optionally
     * Insertion policy (prepend/append space under what conditions)
  * Ability to flag a named region extraction key as providing completions after a list of tokens
     * Ability to intercept and filter based on scope
  * Generic extraction-based completion contributor

FORMATTING:

  * Rename AntlrFormatterProvider to AntlrFormatter and update in the annotation processor
  * REINDENT SUPPORT
  * Should preserve whitespace if no action taken

ACTIONS:

  * Most likely just need to use shared action names now that they're in the editor kit
    * Well, that's a big fat NOPE.

OTHER:
  * Generic indexing support
    * Annotation?


