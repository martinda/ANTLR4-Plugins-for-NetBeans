
Textcell should have withFontName() so font name can be changed - or at least monospaced()

Preview lookup needs to merge that of both editors, and merge the UndoRedo.Manager of both, and the SaveCookies of both.

Partial name completion is broken.

Superfluous parens hint should not be present if rule has outer parentheses, contains an OR and is followed by -> pushMode or similar

CompletionsSupplier should NOT be in the default lookup, it should use Lookups.forPath() or MimeLookup or
we will wind up mixing completions for different languages.

Add EOF hint is using weird choice of rules to add it to.

Colon insert editor feature should not be active when next token is a colon.

Fixes add error method should report BadLocationExceptions not propagate them - adds tons of noise to error handlers.

format two character sets with second notted does not get a space between, e.g. [/]~[x] and shouldx
format: channel, type, pushMode following a comma should have a space prepended
format: #-labels now causing or on next line to be indented:
attrBody
    : attrLabeled #AttrSingleValue
        | ( attrPath AttrLeftParen ( attrStringLiteral | attrIntLiteral )

Format with space inside parens does not put a space in first paren if a label comes after, e.g.
 : (qualifier=path_head? func=Ident LeftParen invocation_args RightParen ) 

Formatting option to align # alternative names (would need a justify pass).

If opened against an un-parseable grammar, syntax tree in preview never gets updated once it is made usable.

Need tests for hetero object graph

Hint to unwrap blocks which are solo w/o any EBNF, e.g. foo: (bar baz); or a : b (c)?)

Finish ebnf suggestions parser - generated text is broken

Error 184 for overlapped rules - should offer to consolidate.



# Refactoring

Need a way to contribute different char filters based on region key

Add option to hints to be added to changes, which will result in selection

Combined undo for refactoring	 

Move annotations littered into SPI into their own package.

All annotation processors should use TypeName, not literal strings.

KeyedSemanticRegion and friends with comparable and two type parameters?  Would be more flexible than NamedSemanticRegions for capturing information.  Still needs enum key field?
  - Attributions could probably be that and it would be more intuitive
  - Will be needed for complex namespace matching, e.g. com.foo.bar.SomeName equals SomeName in another file - probably scoping is not enough.


AntlrKeys should probably be in its own module.  So should the key types in antlr-common - not needed for general Antlr modules, only for
antlr language support.

JFS and friends should be under antlr-editing-plugins - not used in the general case.

NB filesystem for jfs for debugging?

Fix UsageFinder API

# Antlr Editing Plugins To-Dos

  * Import finders and project helper sibling search being called WAY too many times per-parse - threadlocal context and cache?
     * Maybe a generalized threadlocal context and cache API?
  * Folders needs entries for SOURCE_RESOURCES and TEST_SOURCE_RESOURCES, and helpers should support them
  * Add warning when skip action encountered
  * Need a JavaSourceForAntlrSourceQuery to implement refactoring of rule names where we actually go ahead and refactor Java code
  * Add array of preferred rules to generic code completion?
  * Split out code to create parser and api for antlr parser results from annotations and
   other stuff in language spi  * does not belong together
  * Ability to specify a centrality key for Navigator panel annotations  
   * will have to be a Supplier<NamedReferenceSetKey<?>>, so it's not necessary to write implementation
    to enable graph-algorithm facilitated sorting
  * For SemanticRegion highlighting, nesting depth based alteration of color w/ some algorithms, e.g. alpha or hue + by
    * Nestable colorations, as in our old ebnf support
  * Relative should *prefer* but not insist on looking up the same type
  * Resolve via tokens file into other project on classpath via ClassPathProvider
    * Enhance relative resolvers in the nb specialization project to look 
     up tokens files, etc. from the project's ClassPathProvider
  * Maybe get the parsed grammar object out of the grammar result
      * no need to keep it hanging around, and it's not really used except for update check  * could just keep the JFSFileModifications snapshot
        and that is enough; those things that actually need the output should get them via the as yet
        unused antlr output api.
      * Currently being used by code generation to decide which generated java source is the class name of the lexer and parser - but probably not
        needed beyond that, and could just preserve the names
  * The pattern matching stuff in antlr-formatters is exactly what is needed for code completion  * extract and generify it

!!! Font color entries not written to layer unless the annotation processor
is called multiple times (e.g. there is another highlighting entry on a
highlighter registration annotation on a key).

-------

# General Antlr Plugin Support To-Dos

Maybe generic scoping  * parser rule based what can reference what?


FORMATTING:

  * Rename AntlrFormatterProvider to AntlrFormatter and update in the annotation processor
  * REINDENT SUPPORT
  * Should preserve whitespace if no action taken

ACTIONS:

  * Most likely just need to use shared action names now that they're in the editor kit
    * Well, that's a big fat NOPE.

OTHER:
  * Generic indexing support?  Will anything use it?
    * Annotation?
