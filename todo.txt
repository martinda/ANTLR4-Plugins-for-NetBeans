# Refactoring

  * Should be able to rename from an import.
  * FindUsages should return Problem
  * Find usages works on references but not on nameds.
  * Get lookup contents into renames and replacements for refactoring previews
  * Need diff window for preview?

Add option to hints to be added to changes, which will result in selection

Combined undo for refactoring	 

Could do a checksum of tokens within a block as part of extraction, for fast duplicate detection

Move refactoring api to its own module

Get rid of stringifier now that we have localizers

Rename rule refactoring undo is broken

Rename rule refactoring does not work from preview (name reset?)

Rename from original only renames first occurence

Should a key have a relationship to a "name" key, so there is a bounds key and a name key?

KeyedSemanticRegion and friends with comparable and two type parameters?  Would be more flexible than NamedSemanticRegions for capturing information.  Still needs enum key field?
  - Attributions could probably be that and it would be more intuitive

Key localization support.
 - Including localization of enums individually
 - And key/value pair hints in annotation?

Extraction can know the relation between name key and bounds key

Fix UsageFinder API
 - And it should take extraction key, not string



An attribution should have the key it came from

Rename refactoring from ref only renames first occurrence

Name of original element not picked up in new name dialog
 - Usage finder should have option to include original?

Some kind of heinous off-by-god-knows-what in getting text for preview

Individual items are not clickable


# Antlr Editing Plugins To-Dos

  * Navigator panel should use a 1-width rectangle when selecting, so a wider-than-editor selection
      does not show up right-scrolled by default
  * Hint when grammar name and file name do not match
  * Mark unused grammar elements with hint to remove if they are not 0'th and are orphans in the rule graph
     * XXX this will require figuring out usages from importers - usage finders in separate API + indexing
  * Import finders and project helper sibling search being called WAY too many times per-parse - threadlocal context and cache?
     * Maybe a generalized threadlocal context and cache API?

  * Folders needs entries for SOURCE_RESOURCES and TEST_SOURCE_RESOURCES, and helpers should support them
  * Need better caching for maven project info  * it is reparsing POMs too frequently
    * Done, but what's there now only checks the timestamp of the local pom - we already have a dependency cache, so we should use that to check all related poms before assuming we don't know - otherwise adding antlr support to a parent project will not be detected
  * Add warning when skip action encountered
  * Hint for "can match the empty string" is active for things like "desc? S_OPEN_BRACKET L_INT* S_CLOSE_BRACKET;" and
should not be  * fix the analysis.
     * Maybe when defining extraction, should be able to specify a sequence of parent rules that must be present
  * Inplace rename:  The key listener needs to really figure out if it is going to be the first character in the item
  * Need a JavaSourceForAntlrSourceQuery to implement refactoring of rule names where we actually go ahead and refactor Java code
  * Need a presentation UI for keys, in order to use them
  * Need to at least cache which projects are definitely NOT antlr projects by timestamp, to speed up lookups
  * Add array of preferred rules to generic code completion?
  * Split out code to create parser and api for antlr parser results from annotations and
   other stuff in language spi  * does not belong together
  * Ability to specify a centrality key for Navigator panel annotations  * will have to
    be a Supplier<NamedReferenceSetKey<?>>, so it's not necessary to write implementation
    to enable graph-algorithm facilitated sorting
    * If we want additional keys (e.g., to do Antlr named alternatives and 
     anything like that properly without hand-coding), will need localized names for keys
  * For SemanticRegion highlighting, nesting depth based alteration of color w/ some algorithms, e.g. alpha or hue + by
    * Nestable colorations, as in our old ebnf support
  * Sample should be specifiable as a URL / file name
  * Registration processors:  All FQNs should be constants.
  * Annotation processors should produce a list of the modules/maven coordinates which are required in
   order to build everything
  * Use @ConvertAsProperties on preview
  * Java embedding for Antlr, general Antlr embedding support
  * Track insertions and update custom highlighting offsets in adhoc highlighting sequence?
    * Could use general support for sets of ranges in the range library
  * Relative should *prefer* but not insist on looking up the same type
  * Keybinding actions still not actually working if not performers for standard netbeans ones
  * Should keep a cache of resolvable variable names by file, so as not to resolve them
and parse multiple files and do many graph traversals on every reparse.  Cache should listen
on target file and dispose on modification.  Can't be in the extraction project due to
file object type and listening requirement.
  * Resolve via tokens file into other project on classpath via ClassPathProvider
    * Enhance relative resolvers in the nb specialization project to look 
     up tokens files, etc. from the project's ClassPathProvider
  * Maybe get the parsed grammar object out of the grammar result  * no need to keep it hanging around, 
   and it's not really used except for update check  * could just keep the JFSFileModifications snapshot
   and that is enough; those things that actually need the output should get them via the as yet
   unused antlr output api.
  * The pattern matching stuff in antlr-formatters is exactly what is needed for code completion  * extract and generify it

!!! Font color entries not written to layer unless the annotation processor
is called multiple times (e.g. there is another highlighting entry on a
highlighter registration annotation on a key).

-------

# General Antlr Plugin Support To-Dos

Use new carets api to do inplace rename refactoring

Maybe generic scoping  * parser rule based what can reference what?


CODE COMPLETION:
  * Annotation + processor for registering it  * OR ADD TO AntlrLanguageRegistration so it can access parser / lexer
     * Filter tokens optionally
     * Insertion policy (prepend/append space under what conditions)
  * Ability to flag a named region extraction key as providing completions after a list of tokens
     * Ability to intercept and filter based on scope
  * Generic extraction-based completion contributor

FORMATTING:

  * Rename AntlrFormatterProvider to AntlrFormatter and update in the annotation processor
  * REINDENT SUPPORT
  * Should preserve whitespace if no action taken

ACTIONS:

  * Most likely just need to use shared action names now that they're in the editor kit
    * Well, that's a big fat NOPE.

OTHER:
  * Generic indexing support
    * Annotation?


