/*
 * Copyright 2016-2019 Tim Boudreau, Frédéric Yvon Vinet
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nemesis.antlr.spi.language;

import java.util.function.BiConsumer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Vocabulary;
import org.nemesis.extraction.Extraction;
import org.netbeans.api.lexer.TokenId;
import org.netbeans.modules.parsing.api.Snapshot;

/**
 * Glue code needed to adapt a concrete subtype of Antlr's Lexer into the
 * generic NetBeans lexer. An implementation will be generated by the annotation
 * processor for AntlrLanguageRegistration.
 *
 * @author Tim Boudreau
 */
public abstract class NbLexerAdapter<T extends TokenId, L extends org.antlr.v4.runtime.Lexer> {

    /**
     * Get the vocabulary associated with the antlr lexer.
     * 
     * @return A vocabulary
     */
    protected abstract Vocabulary vocabulary();

    /**
     * Creates a new Antlr lexer of the generated type.
     *
     * @param stream A character stream, likely over a document being edited
     * @return A lexer
     */
    protected abstract L createLexer(CharStream stream);

    /**
     * Calls a method that will exist on the generated implementation class, but
     * which does not exist on the parent Lexer class.
     *
     * @param lexer The lexer narrowed to its specific generated type
     * @param modeNumber The mode number to set, for recovering a partial lexing
     */
    protected abstract void setInitialStackedModeNumber(L lexer, int modeNumber);

    /**
     * Get a state value from the lexer in order to store its state for paused /
     * resumed lexing. The generated lexer class will expose this method; it
     * does not exist on the parent class.
     *
     * @param lexer A lexer narrowed to its specific generated type
     * @return The initial mode number
     */
    protected abstract int getInitialStackedModeNumber(L lexer);

    /**
     * Get a NetBeans token id (generated by the annotation processor) for a
     * given token ordinal from an Antlr token.
     *
     * @param ordinal The token type in Antlr parlance
     * @return A token id object
     */
    protected abstract T tokenId(int ordinal);

    protected final void createParseResult( Snapshot snapshot, Extraction extraction,
            BiConsumer<AntlrParseResult, ParseResultContents> receiver ) {
        ParseResultContents[] cts = new ParseResultContents[ 1 ];
        AntlrParseResult res = new AntlrParseResult(vocabulary(), snapshot, extraction, input -> {
            cts[0] = input;
        });
        receiver.accept(res, cts[0]);
    }

    protected final IterableTokenSource wrapLexer(L lexer) {
        return new WrapLexer<>(lexer);
    }

}
