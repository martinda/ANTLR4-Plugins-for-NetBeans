package org.nemesis.antlr.fold;

import java.util.function.Function;
import org.nemesis.data.IndexAddressable;
import org.nemesis.data.SemanticRegion;
import org.nemesis.data.named.NamedSemanticRegion;
import org.nemesis.extraction.ExtractionParserResult;
import org.nemesis.extraction.key.ExtractionKey;
import org.nemesis.extraction.key.NamedRegionKey;
import org.nemesis.extraction.key.RegionsKey;
import org.netbeans.api.editor.fold.FoldType;
import org.netbeans.modules.parsing.spi.Parser;
import org.netbeans.modules.parsing.spi.TaskFactory;
import org.netbeans.spi.editor.fold.FoldInfo;
import org.netbeans.spi.editor.fold.FoldManagerFactory;
import org.openide.util.Parameters;

/**
 * Entry point to the (minimal) API of this module - all of the code involved in
 * creating a fold type is generated by the annotation processor;
 *
 * @see org.netbeans.spi.editor.fold.FoldInfo
 * @author Tim Boudreau
 */
public interface KeyToFoldConverter<I extends IndexAddressable.IndexAddressableItem> extends Function<I, FoldInfo> {

    /**
     * Create a default instance of KeyToFoldConverter which always returns
     * FoldType.CODE_BLOCK for the fold type.
     *
     * @param <I> The type of item returned by the regions extracted from the
     * parse - most likely NamedSemanticRegion or SemanticRegion.
     * @return A KeyToFoldConverter
     */
    public static <I extends IndexAddressable.IndexAddressableItem> KeyToFoldConverter<I> createDefault() {
        return create(FoldType.CODE_BLOCK);
    }

    /**
     * Create a KeyToFoldConverter which always returns a fixed fold type.
     *
     * @param <I> The type of extraction item
     * @param foldType The fold type
     * @return A KeyToFoldConverter
     */
    public static <I extends IndexAddressable.IndexAddressableItem> KeyToFoldConverter<I> create(FoldType foldType) {
        Parameters.notNull("foldType", foldType);
        return new ManagerFactory.DefaultKeyToFoldConverter<>(foldType);
    }

    /**
     * Create a task factory for parser tasks which refresh code folds after the
     * file is reparsed.
     *
     * @param mimeType The mime type
     * @param key The key
     * @return A task factory
     */
    default TaskFactory createTaskFactory(String mimeType, ExtractionKey<?> key) {
        return ManagerFactory.taskFactory();
    }

    /**
     * Create a FoldManagerFactory which can create FoldManagers for files which
     * will create code-folds from SemanticRegion instances in the Extraction
     * generated from parsing the file, looking for them using the passed
     * regions key.
     *
     * @see org.netbeans.spi.editor.fold.FoldInfo
     * @param <T> The type the key and extracted regions will be parameterized
     * on - the type which contains any details extracted from the Antlr parse
     * tree.
     * @param <P> The parser result type - typically AntlrParseResult
     * @param key The key to fetch the collected data from the parser result's
     * Extractions
     * @param converter A converter which takes a region and returns a FoldInfo
     * for it
     * @return
     */
    public static <T, P extends Parser.Result & ExtractionParserResult> FoldManagerFactory createFoldManagerFactory(RegionsKey<T> key, KeyToFoldConverter<SemanticRegion<T>> converter) {
        Parameters.notNull("key", key);
        return ManagerFactory.create(key, converter);
    }

    /**
     * Create a FoldManagerFactory which can create FoldManagers for files which
     * will create code-folds from NamedSemanticRegion instances in the
     * Extraction generated from parsing the file, looking for them using the
     * passed regions key.
     *
     * @see org.netbeans.spi.editor.fold.FoldInfo
     * @param <T> The type the key and extracted regions will be parameterized
     * on - the type which contains any details extracted from the Antlr parse
     * tree.
     * @param <P> The parser result type - typically AntlrParseResult
     * @param key The key to fetch the collected data from the parser result's
     * Extractions
     * @param converter A converter which takes a region and returns a FoldInfo
     * for it. If null, the default CODE_BLOCK converter will be used.
     * @return A fold manager factory
     */
    public static <T extends Enum<T>, P extends Parser.Result & ExtractionParserResult> FoldManagerFactory createFoldManagerFactory(NamedRegionKey<T> key, KeyToFoldConverter<NamedSemanticRegion<T>> converter) {
        Parameters.notNull("key", key);
        return ManagerFactory.create(key, converter);
    }

    /**
     * Create a FoldManagerFactory which can create FoldManagers for files which
     * will create code-folds from SemanticRegion instances in the Extraction
     * generated from parsing the file, looking for them using the passed
     * regions key. Created folds will use the default <code>CODE_BLOCK</code>
     * code-fold type.
     *
     * @see org.netbeans.api.editor.fold.FoldType.CODE_BLOCK
     * @param <T> The type the key and extracted regions will be parameterized
     * on - the type which contains any details extracted from the Antlr parse
     * tree.
     * @param <P> The parser result type - typically AntlrParseResult
     * @param key The key to fetch the collected data from the parser result's
     * Extractions
     * @return A fold manager factory
     */
    public static <T, P extends Parser.Result & ExtractionParserResult> FoldManagerFactory createFoldManagerFactory(RegionsKey<T> key) {
        Parameters.notNull("key", key);
        return ManagerFactory.create(key, FoldType.CODE_BLOCK);
    }

    /**
     * Create a FoldManagerFactory which can create FoldManagers for files which
     * will create code-folds from SemanticRegion instances in the Extraction
     * generated from parsing the file, looking for them using the passed
     * regions key.
     *
     * @param <T> The type the key and extracted regions will be parameterized
     * on - the type which contains any details extracted from the Antlr parse
     * tree.
     * @param <P> The parser result type - typically AntlrParseResult
     * @param key The key to fetch the collected data from the parser result's
     * Extractions
     * @param foldType The fold type to use
     * @return A fold manager factory
     */
    public static <T, P extends Parser.Result & ExtractionParserResult> FoldManagerFactory createFoldManagerFactory(RegionsKey<T> key, FoldType foldType) {
        Parameters.notNull("key", key);
        Parameters.notNull("foldType", foldType);
        return ManagerFactory.create(key, new ManagerFactory.DefaultKeyToFoldConverter<>(foldType));
    }

    /**
     * Create a FoldManagerFactory which can create FoldManagers for files which
     * will create code-folds from NamedSemanticRegion instances in the
     * Extraction generated from parsing the file, looking for them using the
     * passed regions key.
     *
     * @param <T> The type the key and extracted regions will be parameterized
     * on - the type which contains any details extracted from the Antlr parse
     * tree.
     * @param <P> The parser result type - typically AntlrParseResult
     * @param key The key to fetch the collected data from the parser result's
     * Extractions
     * @return A fold manager factory
     */
    public static <T extends Enum<T>, P extends Parser.Result & ExtractionParserResult> FoldManagerFactory createFoldManagerFactory(NamedRegionKey<T> key) {
        Parameters.notNull("key", key);
        return ManagerFactory.create(key, FoldType.CODE_BLOCK);
    }

    /**
     * Create a FoldManagerFactory which can create FoldManagers for files which
     * will create code-folds from NamedSemanticRegion instances in the
     * Extraction generated from parsing the file, looking for them using the
     * passed regions key.
     *
     * @param <T> The type the key and extracted regions will be parameterized
     * on - the type which contains any details extracted from the Antlr parse
     * tree.
     * @param <P> The parser result type - typically AntlrParseResult
     * @param key The key to fetch the collected data from the parser result's
     * Extractions
     * @param foldType The fold type to use
     * @return A fold manager factory
     */
    public static <T extends Enum<T>, P extends Parser.Result & ExtractionParserResult> FoldManagerFactory createFoldManagerFactory(NamedRegionKey<T> key, FoldType foldType) {
        Parameters.notNull("key", key);
        Parameters.notNull("foldType", foldType);
        return ManagerFactory.create(key, new ManagerFactory.DefaultKeyToFoldConverter<>(foldType));
    }
}
