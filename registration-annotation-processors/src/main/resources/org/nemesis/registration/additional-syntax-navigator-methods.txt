private static boolean ruleToString(ParserRuleContext ctx, BiPredicate<String, ParserRuleContext> bi) {
        String nm = ctx.getClass().getSimpleName();
        if (nm.endsWith("Context")) {
            nm = nm.substring(0, nm.length() - 7);
        }
        Token start = ctx.getStart();
        Token stop = ctx.getStop();
        if (start != null && (start == stop || start.equals(stop))) {
            if (!hasRuleChildren(ctx)) {
                String text = start.getText();
                if (text.length() > 36) {
                    text = text.substring(0, 35) + "\u2026"; // ellipsis
                }
                String termText = "";
                if (isTerminal(ctx)) {
                    int tokenType = start.getType();
                    termText = "<i>(" + VOCABULARY.getSymbolicName(tokenType) + ")" ;
                }
                return bi.test("<b>" + escapeHtml(text)
                    + "</b> <font color=\"!controlShadow\">" + nm + termText, ctx);
            }
        }
        ParserRuleContext parent = ctx.getParent();
        if (parent != null && isSameBounds(ctx, parent)) {
            nm = "<font color='!controlShadow'><i>"+ nm + "</i></font>";
        }
        try {
            return bi.test(nm, ctx);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger("TARGET_CLASS").log(Level.INFO,
                    "Likely range add out of order adding "
                    + nm + " - " + ctx + " from " + start.getStartIndex()
                    + " to " + stop.getStopIndex(), ex);
        }
        return false;
    }

    private static final Set<Class<?>> terms = new HashSet<>(2);
    private static final Set<Class<?>> notTerms = new HashSet<>(2);
    static boolean isTerminal(ParserRuleContext ctx) {
        Class<?> type = ctx.getClass();
        if (ctx instanceof TerminalNode) {
            return true;
        } else
        if (terms.contains(type)) {
            return true;
        } else if (notTerms.contains(type)) {
            return false;
        }
        if ("TerminalContext".equals(type.getSimpleName())) {
            terms.add(type);
            return true;
        } else {
            notTerms.add(type);
        }
        return false;
    }

    private static boolean hasRuleChildren(ParserRuleContext ctx) {
        int max = ctx.getChildCount();
        for ( int i = 0; i < max; i++ ) {
            ParseTree tree = ctx.getChild( i );
            if ( tree instanceof ParserRuleContext ) {
                return true;
            }
        }
        return false;
    }

    private static String escapeHtml(String val) {
        StringBuilder sb = new StringBuilder(val.length() + 10);
        for (int i=0; i < val.length(); i++) {
            char c = val.charAt(i);
            switch(c) {
                case '"' :
                    sb.append("&quot;");
                    break;
                case '<' :
                    sb.append("&lt;");
                    break;
                case '&' :
                    sb.append("&amp;");
                    break;
                case '>':
                    sb.append("&gt;");
                    break;
                default :
                    sb.append(c);
            }
        }
        return sb.toString();
    }

    private static boolean isSameBounds(ParserRuleContext child, ParserRuleContext parent) {
        Token childStart = child.start;
        Token childStop = child.stop;
        Token parentStart = parent.start;
        Token parentStop = parent.stop;
        if (childStart == parentStart && childStop == parentStop) {
            return true;
        }
        if (Objects.equals(childStart, parentStart) && Objects.equals(childStop, parentStop)) {
            return true;
        }
        if (childStart != null && parentStart != null) {
            if (childStart.getStartIndex() == parentStart.getStartIndex()) {
                if (childStop != null && parentStop != null) {
                    if (childStop.getStopIndex() == parentStop.getStopIndex()) {
                        return true;
                    }
                } else {
                    return true;
                }
            }
        }
        return false;
    }
